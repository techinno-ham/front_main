events {
    worker_connections 2048;
    use epoll;
}

http {

    include mime.types;
    default_type application/octet-stream;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    client_max_body_size 20M;

    gzip on;
    gzip_min_length 256;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml;
    gzip_vary on;

    # log_format custom_format '$remote_addr - $remote_user [$time_local] '
    #                         '"$request" $status $body_bytes_sent '
    #                         '"$http_referer" "$http_user_agent"';

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # keepalive_timeout 65;  # Time to keep the connection open for Keep-Alive
    # add_header Connection keep-alive;  # Add a header to indicate Keep-Alive support            
    # include         /etc/nginx/mime.types;
    # default_type    application/octet-stream;
    # sendfile        on;

    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=200r/s;
    limit_req_zone $binary_remote_addr zone=cdn_limit:10m rate=200r/s;
    limit_req_zone $binary_remote_addr zone=front_limit:10m rate=400r/s;
    limit_req_zone $binary_remote_addr zone=lang_limit:10m rate=20r/s;
    
    # Gloabl rate limiter for open ai
    # limit_req_zone $shared_limit:10m rate=20r/s;            
    limit_req_status 429; 

     upstream frontend {
        least_conn;
        keepalive 30;
        server 127.0.0.1:3000;  # Replace with the actual service IP/Port
        }

     upstream back_servers {
        least_conn;
        keepalive 30;
        server 65.109.193.233:8000 max_fails=3 fail_timeout=10s;
    }

    upstream minio_s3 {
        least_conn; 
        #server 65.109.193.233:9000;
        keepalive 15;
        server 45.139.10.130:9000;
    }

    upstream langchain_servers {
        least_conn;
        keepalive 15;
        server 65.109.202.44:8000 max_fails=3 fail_timeout=30s;
        server 65.109.202.44:8001 max_fails=3 fail_timeout=30s;
    }

    server {
        
        listen 443 ssl http2; # managed by Certbot
        server_name hamyar.chat www.hamyar.chat;

        # Old ssl configs
        # ssl_certificate /etc/letsencrypt/live/hamyar.chat/fullchain.pem; # managed by Certbot
        # ssl_certificate_key /etc/letsencrypt/live/hamyar.chat/privkey.pem; # managed by Certbot
        # include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot


        ssl_certificate /etc/letsencrypt/live/hamyar.chat/fullchain.pem; # managed by Certbot
        ssl_certificate_key /etc/letsencrypt/live/hamyar.chat/privkey.pem; # managed by Certbot
        include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
        ssl_prefer_server_ciphers on;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 1h;
        ssl_stapling on;
        ssl_stapling_verify on;
        
        # add_header X-Frame-Options "DENY";
        # add_header X-Content-Type-Options "nosniff";
        # add_header X-XSS-Protection "1; mode=block";
        # add_header Referrer-Policy "no-referrer";
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";

        # ignore_invalid_headers off;
        # client_max_body_size 0;
        # proxy_buffering off;
        # proxy_request_buffering off;

        location ~* /(phpMyAdmin|pma|PMA|sqladmin|mysql|dbadmin|adminer|sql|myadmin|phpMyAdmin-.*|.*phpmyadmin.*)/ {
        return 403;
        }

        # Block requests to any files like index.php in the specific paths
        location ~* /(admin|mysql|dbadmin|phpMyAdmin|PMA|phpmyadmin).*\.php$ {
        return 403;
        }

        location / {

            limit_req zone=front_limit burst=300 nodelay;

            proxy_pass http://frontend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
  
        location /api {

                

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;  # Match the origin dynamically
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Accept' always;
                add_header 'Content-Length' 0;
                return 204;  # No content response for preflight
            }

            client_max_body_size 20M;
            limit_req zone=api_limit burst=100 nodelay;

            # Add headers for rate limiting
            # add_header X-RateLimit-Limit 5;
            # add_header X-RateLimit-Remaining $limit_req_remaining;
            # add_header X-RateLimit-Reset $limit_req_reset;

            rewrite ^/api/(.*) /$1  break;

            #Handling Cache
            etag off;
            expires off;
            proxy_cache off;
            if_modified_since off;
            proxy_set_header If-None-Match "";
            proxy_set_header Pragma "no-cache";
            proxy_set_header Cache-Control "no-store, no-cache, must-revalidate, proxy-revalidate";
            add_header Cache-Control 'private, no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0, s-maxage=0, no-transform';
            add_header Pragma "no-cache";
            add_header Expires "0";
            add_header Last-Modified $date_gmt;

            proxy_ignore_headers X-Accel-Expires Expires Cache-Control;

            #Handling Cookie
            proxy_pass_header Set-Cookie;
            proxy_set_header Cookie $http_cookie;


            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 10s;  
            proxy_send_timeout 10s;     
            proxy_read_timeout 10s; 
            proxy_pass http://back_servers/;

            # Add CORS headers for all responses
                add_header 'Access-Control-Allow-Origin' $http_origin always;  # Match the origin dynamically
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS, PATCH' always;
                add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Accept' always;

                # Hide headers
                proxy_hide_header Access-Control-Allow-Origin;
                proxy_hide_header Access-Control-Allow-Credentials;
                proxy_hide_header Access-Control-Allow-Methods;
                proxy_hide_header Access-Control-Allow-Headers;

            # proxy_pass_header Access-Control-Allow-Origin;
            # proxy_pass_header Access-Control-Allow-Methods;
            # proxy_pass_header Access-Control-Allow-Headers;
            # proxy_pass_header Access-Control-Allow-Headers;
            # proxy_set_header Access-Control-Allow-Credentials "true";
            # add_header Access-Control-Allow-Credentials true;
        }
        location /sentry {
            rewrite ^/sentry/(.*) /$1  break;
            proxy_pass http://65.109.202.44:4000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 5s;  
            proxy_send_timeout 5s;     
            proxy_read_timeout 5s; 
        }
        location /chat {
            
            limit_req zone=lang_limit burst=50 nodelay;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';  # Allow all origins or specify your domain
                add_header 'Access-Control-Allow-Methods' '*';  # Allow methods
                add_header 'Access-Control-Allow-Headers' '*';  # Allow headers
                add_header 'Content-Length' 0;
                return 204;  # No content response for preflight
            }


            rewrite ^/chat/(.*) /$1  break;
            proxy_pass http://langchain_servers/;
            proxy_http_version 1.1;
            proxy_set_header "Connection" "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 15s;  
            proxy_send_timeout 15s;     
            proxy_read_timeout 15s; 

            proxy_pass_header Access-Control-Allow-Origin;
            proxy_pass_header Access-Control-Allow-Methods;
            proxy_pass_header Access-Control-Allow-Headers;
        }

        location /cdn {

            limit_req zone=cdn_limit burst=100 nodelay;

            rewrite ^/cdn/(.*) /$1  break;
            proxy_pass http://minio_s3/;
            #This is necessary to use keepalive
            proxy_http_version 1.1;      # Ensure HTTP/1.1 is used to support features like keep-alive
            proxy_set_header "Connection" "";  # Clear the Connection header for proper proxying
            chunked_transfer_encoding off;   # Disable chunked transfer encoding
            proxy_set_header Host hamyar.chat;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # proxy_connect_timeout 5s;
            # proxy_send_timeout 5s;
            # proxy_read_timeout 5s;
            gzip on;                        # Enable gzip compression
            gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;  # File types to compress
            gzip_min_length 1000;            # Minimum length of response to compress (in bytes)
            gzip_vary on;                    # Adds "Vary: Accept-Encoding" header
            gzip_proxied any;                # Compress responses even if they're coming from proxied servers
            gzip_buffers 16 8k;              # Buffers for gzip (adjust according to your needs)
            gzip_comp_level 8;               # Compression level (1-9, higher means more compression but more CPU load)

        }

        location ^~ /chatbot {
        alias /usr/share/nginx/html/chatbot;  # Serve files from the mounted chatbot directory
        try_files $uri $uri/ /chatbot/index.html;
        # Try to serve the requested file, if not found serve the index.html
        # try_files $uri $uri/ /demo/index.html;  
        }
     

        location /test {
            # limit_req zone=test_limit burst=3 nodelay;
            #limit_req zone=mylimit burst=3 nodelay;
            return 200 "18";
        }



        error_page 429 = @rate_limit;

        location @rate_limit {
            default_type application/json;
            return 429 '{"status": 429, "message": "Too Many Requests"}';
        }


    }

    server {
        if ($host = www.hamyar.chat) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        if ($host = hamyar.chat) {
            return 301 https://$host$request_uri;
        } # managed by Certbot

        listen 80;
        server_name hamyar.chat www.hamyar.chat;
        return 404; # managed by Certbot
    }
}


#==============================
#Notes:
        # location /cdn {
        #     rewrite ^/cdn/(.*) /$1  break;
        #     proxy_pass http://minio_s3/;
        #     # proxy_http_version 1.1;      # Ensure HTTP/1.1 is used to support features like keep-alive
        #     # proxy_set_header Connection "";  # Clear the Connection header for proper proxying
        #     # chunked_transfer_encoding off;   # Disable chunked transfer encoding
        #     proxy_http_version 1.1;
        #     proxy_set_header Connection "keep-alive";
        #     chunked_transfer_encoding on;
        #     proxy_set_header Host $host;
        #     proxy_set_header X-Real-IP $remote_addr;
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #     proxy_connect_timeout 15s;
        #     proxy_send_timeout 15s;
        #     proxy_read_timeout 15s;
        # }
        #Working redirect
        # location ~ ^/cdn/(.*)$ {
        #     add_header Cache-Control "public, max-age=3600"; # Cache for 1 year
        #     return 302 https://cdn.hamyar.chat/$1;
        # }

        # location /cdn {
        #     rewrite ^/cdn/(.*)$ /$1 break;  # Rewrite the incoming URI to remove /cdn
        #     return 302 http://65.109.193.233:9000/$1;  # Redirect to the MinIO server with the rewritten path
        # }